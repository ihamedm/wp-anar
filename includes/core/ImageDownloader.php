<?php
namespace Anar\Core;

use WP_Error;

class ImageDownloader{

    private static $instance = null;
    private $size_limit;
    private $timeout;
    private $retry_limit;
    private $current_product_id_for_upload = null; // Added property

    /**
     * Private constructor to prevent direct instantiation
     */
    private function __construct($size_limit = 5 * 1024 * 1024, $timeout = 60, $retry_limit = 2){
        $this->size_limit = $size_limit;
        $this->timeout = $timeout;
        $this->retry_limit = $retry_limit;
    }

    /**
     * Get singleton instance
     *
     * @return ImageDownloader
     */
    public static function get_instance($size_limit = 5 * 1024 * 1024, $timeout = 60, $retry_limit = 2) {
        if (self::$instance === null) {
            self::$instance = new self($size_limit, $timeout, $retry_limit);
        }
        return self::$instance;
    }

    /**
     * Prevent cloning of the instance
     */
    private function __clone() {}

    /**
     * Prevent unserializing of the instance
     */
    public function __wakeup() {}

    /**
     * Download an image from a URL and insert it into the WordPress media library.
     *
     * @param string $image_url The URL of the image to download.
     * @param int $product_id The ID of the product to attach the image to.
     * @return int|WP_Error The attachment ID on success, or a WP_Error on failure.
     */
    public function save_image_as_attachment($image_url, int $product_id) {
        // Validate URL - more lenient for URLs with non-ASCII characters
        if (empty($image_url)) {
            anar_log("Empty image URL for product ID: $product_id", 'debug');
            return new WP_Error('empty_image_url', 'آدرس تصویر خالی است.');
        }
        
        // Check if URL has a valid scheme and structure, but be lenient with non-ASCII characters
        $parsed_url = parse_url($image_url);
        if (!$parsed_url || !isset($parsed_url['scheme']) || !isset($parsed_url['host'])) {
            anar_log("Invalid image URL structure for product ID: $product_id. URL: $image_url", 'debug');
            return new WP_Error('invalid_image_url', 'ساختار آدرس تصویر نامعتبر است.');
        }

        $existing_attachment_id = $this->is_image_downloaded($image_url, $product_id);
        if ($existing_attachment_id) {
            anar_log("Image #{$existing_attachment_id} downloaded before, so skipp download again and use it.", 'debug');
            anar_log("Returning existing attachment ID: $existing_attachment_id for URL: $image_url", 'debug');
            return $existing_attachment_id;
        }

        // Transform the image URL if needed
        $image_url = $this->transform_image_url($image_url);

        // Get the image file name from the URL
        $image_name = basename($image_url);

        // Get the WordPress upload directory
        // We get the default here, but will filter it later
        $upload_dir = wp_upload_dir();

        // Determine the filename (use unique filename function later within the filter context if needed)
        $image_name = basename(parse_url($image_url, PHP_URL_PATH)); // Get filename from path
        $image_name = sanitize_file_name($image_name); // Sanitize

        // Temporarily store product ID and add the filter
        $this->current_product_id_for_upload = $product_id;
        add_filter('upload_dir', [$this, '_custom_upload_dir']);

        $attachment_id = new WP_Error('filter_error', 'وضعیت اولیه قبل از بلوک try.'); // Default error

        try {
            // Note: wp_unique_filename needs the target directory, which our filter provides.
            // We let wp_insert_attachment handle the file saving and unique naming within the filtered directory.

            // Prepare the attachment data array (file path is determined by wp_insert_attachment using the filtered upload_dir)
            $attachment_data = array(
                // 'guid' will be generated by wp_insert_attachment based on the final path
                'post_mime_type' => wp_check_filetype($image_name, null)['type'], // Basic mime type check based on name
                'post_title'     => preg_replace('/\.[^.]+$/', '', $image_name), // Title from filename without extension
                'post_content'   => '',
                'post_status'    => 'inherit'
            );

            // Let WordPress handle the upload and attachment creation using the filtered directory
            // We need to sideload the image data instead of providing a file path directly
            // Ensure required functions are loaded
            require_once(ABSPATH . 'wp-admin/includes/file.php');
            require_once(ABSPATH . 'wp-admin/includes/media.php');
            require_once(ABSPATH . 'wp-admin/includes/image.php');

            // Use our fetch_image method which includes proxy fallback
            $fetch_result = $this->fetch_image($image_url);
            if (is_wp_error($fetch_result)) {
                anar_log("Failed to download image: " . $fetch_result->get_error_message());
                return $fetch_result;
            }

            // Extract response and actual URL from the result
            $response = $fetch_result['response'];
            $actual_url = $fetch_result['actual_url'];

            // Get the image data from the response
            $image_data = wp_remote_retrieve_body($response);
            if (empty($image_data)) {
                anar_log("Empty image data received for URL: $image_url");
                return new WP_Error('empty_image_data', 'داده‌های تصویر خالی است.');
            }

            // Check for large file size
            $content_length = wp_remote_retrieve_header($response, 'content-length');
            if ($this->size_limit > 0 && $content_length > $this->size_limit) {
                anar_log("Image file larger than ".($this->size_limit/(1024*1024))."MB: $content_length bytes");
                return new WP_Error('image_too_large', 'حجم تصویر بیش از حد مجاز است.');
            }

            // Create a temporary file with the image data
            $tmp = wp_tempnam($image_name);
            if (!$tmp) {
                anar_log("Failed to create temporary file for image: $image_url");
                return new WP_Error('temp_file_creation_failed', 'ایجاد فایل موقت ناموفق بود.');
            }

            // Write the image data to the temporary file
            $bytes_written = file_put_contents($tmp, $image_data);
            if ($bytes_written === false) {
                @unlink($tmp);
                anar_log("Failed to write image data to temporary file: $image_url");
                return new WP_Error('temp_file_write_failed', 'نوشتن داده‌های تصویر به فایل موقت ناموفق بود.');
            }

            $file_array = array();
            $file_array['name'] = $image_name;
            $file_array['tmp_name'] = $tmp;


            // Sideload the image - this uses wp_insert_attachment internally and respects our filter
            $attachment_id = media_handle_sideload($file_array, $product_id, $attachment_data['post_title'], $attachment_data);

            // Check for errors during sideloading
            if (is_wp_error($attachment_id)) {
                @unlink($file_array['tmp_name']); // Delete temp file
                anar_log("Failed to sideload image: " . $attachment_id->get_error_message());
                // Return the WP_Error object
            } else {
                 // Mark this image URL as downloaded only on success
                $this->mark_image_as_downloaded($image_url, $product_id, $attachment_id, $actual_url);
                anar_log("image #{$attachment_id} uploaded - Product #{$product_id}");
            }

        } catch (\Exception $e) {
             anar_log("Exception during image saving for product #{$product_id}: " . $e->getMessage(), 'error');
             $attachment_id = new WP_Error('image_save_exception', $e->getMessage());
        } finally {
            // Always remove the filter and clear the temporary property
            remove_filter('upload_dir', [$this, '_custom_upload_dir']);
            $this->current_product_id_for_upload = null;
            // Clean up temp file if it still exists and there was an error
             if (isset($file_array['tmp_name']) && file_exists($file_array['tmp_name'])) {
                 @unlink($file_array['tmp_name']);
             }
        }

        return $attachment_id; // Return attachment ID or WP_Error
    }

    /**
     * Download an image from a URL, insert it into the media library, and set it as the product's featured image.
     *
     * @param int $product_id The ID of the product to set the image for.
     * @param string $image_url The URL of the image to download.
     * @return int|WP_Error The attachment ID on success, or a WP_Error on failure.
     */
    public function set_product_thumbnail($product_id, $image_url) {
        // Insert the attachment into the WordPress media library
        $attachment_id = $this->save_image_as_attachment($image_url, $product_id);

        // Check if there was an error in downloading and inserting the image
        if (is_wp_error($attachment_id)) {
            anar_log("Failed to download and insert attachment for product ID: $product_id. Error: " . $attachment_id->get_error_message());
            // Clean this meta to skip from cron job check
            delete_post_meta($product_id, '_product_image_url', false);
            return $attachment_id;
        }

        // Set the downloaded image as the product's featured image
        $thumbnail_result = set_post_thumbnail($product_id, $attachment_id);

        if (!$thumbnail_result) {
            anar_log("Failed to set product thumbnail for product ID: $product_id");
            // Clean this meta to skip from cron job check
            delete_post_meta($product_id, '_product_image_url', false);
            return new WP_Error('thumbnail_set_failed', 'تنظیم تصویر شاخص محصول ناموفق بود.');
        }

        // Clean this meta to skip from cron job check
        delete_post_meta($product_id, '_product_image_url', false);
        anar_log('Product #'.$product_id.' thumbnail is set');
        return $attachment_id;
    }

    /**
     * Set product gallery images from array of image URLs
     *
     * @param int   $product_id         Product ID
     * @param array $image_urls         Array of image URLs
     * @param int   $gallery_image_limit Maximum number of images to use
     * @return array|WP_Error Array of attachment IDs or WP_Error
     */
    public function set_product_gallery($product_id, $image_urls, $gallery_image_limit = 5) {
        if (!is_array($image_urls) || empty($image_urls)) {
            anar_log("No valid image URLs provided for product ID: $product_id", 'debug');
            return new \WP_Error('invalid_image_urls', 'هیچ آدرس تصویر معتبری ارائه نشده است.');
        }

        if (!$product_id || !is_numeric($product_id)) {
            anar_log("Invalid product ID provided: $product_id", 'error');
            return new \WP_Error('invalid_product_id', 'شناسه محصول نامعتبر است.');
        }

        // Check if product exists
        $product = wc_get_product($product_id);
        if (!$product) {
            anar_log("Product not found with ID: $product_id", 'error');
            return new \WP_Error('product_not_found', 'محصول یافت نشد.');
        }

        $attachment_ids = [];
        $successful_downloads = 0;
        $failed_downloads = 0;

        // Limit the number of images to process
        $image_urls = array_slice($image_urls, 0, $gallery_image_limit);

        foreach ($image_urls as $image_url) {
            // Validate URL - more lenient for URLs with non-ASCII characters
            if (empty($image_url)) {
                anar_log("Empty image URL for product ID: $product_id", 'debug');
                $failed_downloads++;
                continue; // Skip this URL but continue processing others
            }
            
            // Check if URL has a valid scheme and structure, but be lenient with non-ASCII characters
            $parsed_url = parse_url($image_url);
            if (!$parsed_url || !isset($parsed_url['scheme']) || !isset($parsed_url['host'])) {
                anar_log("Invalid image URL structure for product ID: $product_id. URL: $image_url", 'debug');
                $failed_downloads++;
                continue; // Skip this URL but continue processing others
            }

            try {
                // Download and upload the image
                $attachment_id = $this->save_image_as_attachment($image_url, $product_id);

                if (is_wp_error($attachment_id)) {
                    anar_log(
                        "Failed to download image for product ID: $product_id. URL: $image_url. Error: " .
                        $attachment_id->get_error_message(),
                        'error'
                    );
                    $failed_downloads++;
                    continue; // Skip this URL but continue processing others
                }

                // Debug: Log what we got back
                anar_log("Gallery processing - Product ID: $product_id, URL: $image_url, Attachment ID: $attachment_id", 'debug');

                $attachment_ids[] = $attachment_id;
                $successful_downloads++;

            } catch (\Exception $e) {
                anar_log(
                    "Exception while processing image for product ID: $product_id. URL: $image_url. Error: " .
                    $e->getMessage(),
                    'error'
                );
                $failed_downloads++;
                continue; // Skip this URL but continue processing others
            }
        }

        // Set product gallery images if there are attachment IDs
        anar_log("Final check - Attachment IDs: " . print_r($attachment_ids, true) . ", Successful: $successful_downloads, Failed: $failed_downloads", 'debug');
        if (!empty($attachment_ids)) {
            try {
                // Merge with existing gallery images if needed
                $existing_gallery_ids = $product->get_gallery_image_ids();
                $attachment_ids = array_merge($existing_gallery_ids, $attachment_ids);

                $product->set_gallery_image_ids($attachment_ids);
                $product->save();

                anar_log(
                    "Product #$product_id gallery updated successfully. " .
                    "Added: $successful_downloads images. Failed: $failed_downloads images.",
                    'info'
                );

                return [
                    'attachment_ids' => $attachment_ids,
                    'successful' => $successful_downloads,
                    'failed' => $failed_downloads
                ];

            } catch (\Exception $e) {
                anar_log(
                    "Failed to update gallery for product ID: $product_id. Error: " . $e->getMessage(),
                    'error'
                );
                return new \WP_Error(
                    'gallery_update_failed',
                    'به‌روزرسانی گالری محصول ناموفق بود.',
                    [
                        'product_id' => $product_id,
                        'error_message' => $e->getMessage(),
                        'attachment_ids' => $attachment_ids
                    ]
                );
            }
        } else {
            $status = $failed_downloads > 0 ? 'All downloads failed' : 'No images to process';
            anar_log("$status for product ID: $product_id", 'debug');
            return new \WP_Error(
                'no_gallery_images',
                'هیچ تصویر گالری با موفقیت دانلود نشد.',
                [
                    'product_id' => $product_id,
                    'failed_downloads' => $failed_downloads
                ]
            );
        }
    }

    /**
     * Check if the URL starts with the expected prefix.
     * @param string $url
     * @return string Transformed URL.
     */
    public function transform_image_url($url) {
        $prefix = "https://s3.c22.wtf/";
        if (strpos($url, $prefix) === 0) {
            // Replace the initial part of the URL and add the new prefix.
            $new_prefix = "https://s3.anar360.com/_img/width_1024/https://s3.anar360.com/";
            return str_replace($prefix, $new_prefix, $url);
        } else {
            // If the URL does not match the expected pattern, return it unchanged.
            return $url;
        }
    }

    /**
     * Create a proxy URL for failed image downloads.
     * @param string $url The original image URL.
     * @return string The proxy URL.
     */
    public function create_proxy_url($url) {
        $proxy_base = "https://s3.anar360.com/_img/width_1024/";
        $encoded_url = urlencode($url);
        return $proxy_base . $encoded_url;
    }


    /**
     * Attempt to fetch an image from a URL with retries and proxy fallback.
     *
     * @param string $image_url The URL of the image to fetch.
     * @return array|WP_Error Array containing the response and actual URL used, or a WP_Error on failure.
     */
    private function fetch_image($image_url) {
        $attempts = 0;
        $use_proxy = false;

        while ($attempts < $this->retry_limit) {
            // Use proxy URL if this is a retry attempt
            $current_url = $use_proxy ? $this->create_proxy_url($image_url) : $image_url;
            
            $response = wp_remote_get($current_url, array(
                'timeout'     => $this->timeout,
                'redirection' => 10,
                'sslverify'   => false,  // Add this line to disable SSL verification (use with caution)
            ));

            if (!is_wp_error($response)) {
                $http_code = wp_remote_retrieve_response_code($response);
                if ($http_code === 200) {
                    if ($use_proxy) {
                        anar_log("Successfully downloaded image using proxy: $current_url");
                    }
                    // Return response with actual URL information
                    return array(
                        'response' => $response,
                        'actual_url' => $current_url
                    );
                }
            }

            $attempts++;
            
            // If we've exhausted retries with original URL, try proxy on next attempt
            if ($attempts >= $this->retry_limit && !$use_proxy) {
                $use_proxy = true;
                $attempts = 0; // Reset attempts for proxy
                anar_log("Original URL failed, trying proxy for: $image_url");
                continue;
            }
            
            anar_log("Retrying download for URL: $current_url. Attempt #$attempts");
        }

        anar_log("Failed to download image from URL after all attempts (including proxy): $image_url");
        return new WP_Error('image_download_failed', 'دانلود تصویر پس از چندین تلاش ناموفق بود.');
    }


    /**
     * Check if an image has already been downloaded.
     * @param string $image_url The URL of the image.
     * @param int $product_id The ID of the product.
     * @return int|false The attachment ID if the image is already downloaded, false otherwise.
     */
    private function is_image_downloaded($image_url, $product_id) {
        $downloaded = get_post_meta($product_id, '_awca_downloaded_images', true);
        anar_log("Checking if image downloaded - Product ID: $product_id, URL: $image_url", 'debug');
        anar_log("Downloaded images data: " . print_r($downloaded, true), 'debug');
        
        if (is_array($downloaded)) {
            // Check for original URL, transformed URL, and proxy URL
            $transformed_url = $this->transform_image_url($image_url);
            $proxy_url = $this->create_proxy_url($image_url);
            anar_log("Transformed URL: $transformed_url", 'debug');
            anar_log("Proxy URL: $proxy_url", 'debug');
            
            foreach ($downloaded as $entry) {
                if ($entry['url'] === $image_url || 
                    $entry['url'] === $transformed_url || 
                    $entry['url'] === $proxy_url) {
                    anar_log("Found existing image - URL: {$entry['url']}, Attachment ID: {$entry['attachment_id']}", 'debug');
                    return $entry['attachment_id'];
                }
            }
        }
        anar_log("Image not found in downloaded images", 'debug');
        return false;
    }

    /**
     * Mark an image URL as downloaded.
     * @param string $image_url The URL of the image.
     * @param int $product_id The ID of the product.
     * @param int $attachment_id The ID of the attachment.
     * @param string $actual_url The actual URL that was successfully downloaded (original or proxy).
     */
    private function mark_image_as_downloaded($image_url, $product_id, $attachment_id, $actual_url = null) {
        $downloaded = get_post_meta($product_id, '_awca_downloaded_images', true);
        if (!is_array($downloaded)) {
            $downloaded = array();
        }
        
        // Store both the original URL and the actual URL that was downloaded
        $entry = array(
            'url' => $image_url,
            'attachment_id' => $attachment_id
        );
        
        // If we have an actual URL (proxy), store it as well
        if ($actual_url && $actual_url !== $image_url) {
            $entry['actual_url'] = $actual_url;
        }
        
        $downloaded[] = $entry;
        update_post_meta($product_id, '_awca_downloaded_images', $downloaded);
        update_post_meta($product_id, '_anar_downloaded_images', $downloaded);
    }

    /**
     * Filter for wp_upload_dir to change the upload path.
     *
     * @param array $uploads Array of upload directory data.
     * @return array Modified array of upload directory data.
     */
    public function _custom_upload_dir($uploads) {
        // Check if we have a product ID context
        if ($this->current_product_id_for_upload === null) {
            return $uploads; // Do nothing if not called within our specific context
        }

        // Define the base folder for these imports
        $import_folder = 'anar-products';

        // Create a subdirectory based on the product ID (e.g., last two digits)
        // This creates 100 potential subfolders (00-99)
        $sub_folder = sprintf('%02d', $this->current_product_id_for_upload % 100);

        // Construct the new subdirectory path relative to the uploads folder
        $new_subdir = '/' . $import_folder . '/' . $sub_folder;

        // Prevent recursion if the filter is somehow applied again
        if (strpos($uploads['subdir'], $import_folder) === false) {
            $uploads['subdir'] = $new_subdir;
            $uploads['path'] = $uploads['basedir'] . $new_subdir;
            $uploads['url'] = $uploads['baseurl'] . $new_subdir;

             // Ensure the target directory exists. wp_mkdir_p is recursive.
            if (!file_exists($uploads['path'])) {
                wp_mkdir_p($uploads['path']);
            }
        }

        return $uploads;
    }

}


